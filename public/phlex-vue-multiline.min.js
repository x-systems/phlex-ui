(self.webpackChunkphlex=self.webpackChunkphlex||[]).push([[343],{4527:(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});const n={name:"phlex-textarea",template:'<textarea v-model="text" @input="handleChange"></textarea>',props:{value:[String,Number]},data:function(){return{text:this.value}},methods:{handleChange:function(e){this.$emit("input",e.target.value)}}};var l=i(9983),a=i(3453);const o={name:"phlex-multiline-cell",template:' \n    <component :is="getComponent()"\n        :fluid="true"  \n        class="fluid" \n        @input="onInput"\n        @onChange="onChange"\n        v-model="inputValue"\n        :name="inputName"\n        ref="cell"\n        v-bind="getComponentProps()"></component>\n  ',components:{"phlex-multiline-readonly":{template:"<div>{{readOnlyValue}}</div>",name:"phlex-multiline-readonly",props:["readOnlyValue"]},"phlex-multiline-textarea":n,"phlex-date-picker":l.Z,"phlex-lookup":a.Z},props:["cellData","fieldValue"],data:function(){return{fieldName:this.cellData.name,type:this.cellData.type,inputName:"-"+this.cellData.name,inputValue:this.fieldValue}},methods:{getComponent:function(){return this.cellData.definition.component},getComponentProps:function(){return"phlex-multiline-readonly"===this.getComponent()?{readOnlyValue:this.fieldValue}:this.cellData.definition.componentProps},onInput:function(e){this.inputValue=this.getTypeValue(e),this.$emit("update-value",this.fieldName,this.inputValue)},onChange:function(e){this.onInput(e)},getTypeValue:function(e){let t=e;return"boolean"===this.type&&(t=e.target.checked),t}}},s={name:"phlex-multiline-header",template:'\n     <sui-table-header>\n       <sui-table-row v-if="hasError()">\n        <sui-table-cell :style="{background:\'none\'}"></sui-table-cell>\n        <sui-table-cell :style="{background:\'none\'}" state="error" v-for="(column, idx) in columns" :key="idx" v-if="column.isVisible" :textAlign="getTextAlign(column)"><sui-icon name="attention" v-if="getErrorMsg(column)"></sui-icon>{{getErrorMsg(column)}}</sui-table-cell>\n      </sui-table-row>\n       <sui-table-row v-if="hasCaption()">\n        <sui-table-headerCell :colspan="getVisibleColumns()">{{caption}}</sui-table-headerCell>\n       </sui-table-row>\n        <sui-table-row :verticalAlign="\'top\'">\n        <sui-table-header-cell width="one" textAlign="center"><input type="checkbox" @input="onToggleDeleteAll" :checked.prop="isChecked" :indeterminate.prop="isIndeterminate" ref="check"></input></sui-table-header-cell>\n        <sui-table-header-cell v-for="(column, idx) in columns" :key="idx" v-if="column.isVisible" :textAlign="getTextAlign(column)">\n         <div>{{column.caption}}</div>\n         <div :style="{position: \'absolute\', top: \'-22px\'}" v-if="false"><sui-label pointing="below" basic color="red" v-if="getErrorMsg(column)">{{getErrorMsg(column)}}</sui-label></div>\n        </sui-table-header-cell>\n      </sui-table-row>\n    </sui-table-header>\n  ',props:["fields","state","errors","caption"],data:function(){return{columns:this.fields,isDeleteAll:!1}},methods:{onToggleDeleteAll:function(){this.$nextTick((()=>{phlex.eventBus.emit(this.$root.$el.id+"-toggle-delete-all",{isOn:this.$refs.check.checked})}))},getTextAlign:function(e){let t="left";if(!e.isEditable)switch(e.type){case"money":case"integer":case"number":t="right"}return t},getVisibleColumns:function(){let e=1;return this.columns.forEach((t=>{e=t.isVisible?e+1:e})),e},hasError:function(){return Object.keys(this.errors).length>0},hasCaption:function(){return this.caption},getErrorMsg:function(e){if(this.hasError()){const t=Object.keys(this.errors);for(let i=0;i<t.length;i++){const n=this.errors[t[i]].filter((t=>t.name===e.name));if(n.length>0)return n[0].msg}}return null}},computed:{isIndeterminate:function(){return"indeterminate"===this.state},isChecked:function(){return"on"===this.state}}},r={name:"phlex-multiline",template:'<div>\n                <sui-table v-bind="tableProp">\n                  <phlex-multiline-header :fields="fieldData" :state="getMainToggleState" :errors="errors" :caption="caption"></phlex-multiline-header>\n                  <phlex-multiline-body @onTabLastRow="onTabLastRow" :fieldDefs="fieldData" :rowData="rowData" :deletables="getDeletables" :errors="errors"></phlex-multiline-body>\n                  <sui-table-footer>\n                    <sui-table-row>\n                        <sui-table-header-cell/>\n                        <sui-table-header-cell :colspan="getSpan" textAlign="right">\n                        <div is="sui-button-group">\n                         <sui-button size="small" @click.stop.prevent="onAdd" type="button" icon="plus" ref="addBtn" :disabled="isLimitReached"></sui-button>\n                         <sui-button size="small" @click.stop.prevent="onDelete" type="button" icon="trash" :disabled="isDeleteDisable"></sui-button>                        \n                         </div>\n                        </sui-table-header-cell>\n                    </sui-table-row>\n                  </sui-table-footer>\n                </sui-table>\n                <div><input :form="form" :name="name" type="hidden" :value="value" ref="phlexMultilineInput"></div>\n             </div>',props:{data:Object},data:function(){return{form:this.data.formName,value:this.data.inputValue,name:this.data.inputName,rowData:[],fieldData:this.data.fields||[],eventFields:this.data.eventFields||[],deletables:[],hasChangeCb:this.data.hasChangeCb,errors:{},caption:this.data.caption||null,tableProp:{basic:!1,celled:!1,collapsing:!1,stackable:!1,inverted:!1,...this.data.tableProps||{}}}},components:{"phlex-multiline-body":{name:"phlex-multiline-body",template:'\n    <sui-table-body>\n      <phlex-multiline-row v-for="(row , idx) in rows" :key="row.__phlex_multiline" \n      @onTabLastColumn="onTabLastColumn(idx)"\n      :fields="fields" \n      :rowId="row.__phlex_multiline" \n      :isDeletable="isDeletableRow(row)" \n      :rowValues="row"\n      :error="getError(row.__phlex_multiline)"></phlex-multiline-row>\n    </sui-table-body>\n  ',props:["fieldDefs","rowData","deletables","errors"],data:function(){return{fields:this.fieldDefs}},created:function(){},components:{"phlex-multiline-row":{name:"phlex-multiline-row",template:'\n    <sui-table-row :verticalAlign="\'middle\'">\n        <sui-table-cell width="one" textAlign="center"><input type="checkbox" @input="onToggleDelete" v-model="toDelete"></input></sui-table-cell>\n        <sui-table-cell  @keydown.tab="onTab(idx)" v-for="(column, idx) in columns" :key="idx" :state="getErrorState(column)" v-bind="column.cellProps" :style="{overflow: \'visible\'}" v-if="column.isVisible">\n         <phlex-multiline-cell\n           :cellData="column" \n           @update-value="onUpdateValue"\n           :fieldValue="getValue(column)"></phlex-multiline-cell>\n        </sui-table-cell>\n    </sui-table-row>\n  ',props:["fields","rowId","isDeletable","rowValues","error"],data:function(){return{columns:this.fields}},components:{"phlex-multiline-cell":o},computed:{toDelete:{get:function(){return this.isDeletable},set:function(e){return e}}},methods:{onTab:function(e){e===this.columns.filter((e=>e.isEditable)).length&&this.$emit("onTabLastColumn")},getErrorState:function(e){if(this.error){if(this.error.filter((t=>e.name===t.name)).length>0)return"error"}return null},getColumnWidth:function(e){return e.fieldOptions?e.fieldOptions.width:null},onEdit:function(){this.isEditing=!0},onToggleDelete:function(e){phlex.eventBus.emit(this.$root.$el.id+"-toggle-delete",{rowId:this.rowId})},onUpdateValue:function(e,t){phlex.eventBus.emit(this.$root.$el.id+"-update-row",{rowId:this.rowId,fieldName:e,value:t})},getValue:function(e){return this.rowValues[e.name]||e.default}}}},computed:{rows:function(){return this.rowData}},methods:{onTabLastColumn:function(e){e+1===this.rowData.length&&this.$emit("onTabLastRow")},isDeletableRow:function(e){return this.deletables.indexOf(e.__phlex_multiline)>-1},getError:function(e){return e in this.errors?this.errors[e]:null}}},"phlex-multiline-header":s},mounted:function(){this.rowData=this.buildRowData(this.value),this.updateInputValue(),phlex.eventBus.on(this.$root.$el.id+"-update-row",(e=>{this.onUpdate(e.rowId,e.fieldName,e.value)})),phlex.eventBus.on(this.$root.$el.id+"-toggle-delete",(e=>{const t=this.deletables.indexOf(e.rowId);t>-1?this.deletables.splice(t,1):this.deletables.push(e.rowId)})),phlex.eventBus.on(this.$root.$el.id+"-toggle-delete-all",(e=>{this.deletables=[],e.isOn&&this.rowData.forEach((e=>{this.deletables.push(e.__phlex_multiline)}))})),phlex.eventBus.on(this.$root.$el.id+"-multiline-rows-error",(e=>{this.errors={...e.errors}}))},methods:{onTabLastRow:function(){!this.isLimitReached&&this.data.addOnTab&&this.onAdd()},onAdd:function(){const e=this.createRow(this.data.fields);this.rowData.push(e),this.updateInputValue(),this.data.afterAdd&&"function"==typeof this.data.afterAdd&&this.data.afterAdd(phlex.utils.json().tryParse(this.value)),this.fetchExpression(e.__phlex_multiline),this.fetchOnChangeAction()},onDelete:function(){this.deletables.forEach((e=>{this.deleteRow(e)})),this.deletables=[],this.updateInputValue(),this.fetchOnChangeAction(),this.data.afterDelete&&"function"==typeof this.data.afterDelete&&this.data.afterDelete(phlex.utils.json().tryParse(this.value))},onUpdate:function(e,t,i){this.updateFieldInRow(e,t,i),this.clearError(e,t),this.updateInputValue(),phlex.debounce((()=>{this.fetchExpression(e),this.fetchOnChangeAction(t)}),300).call(this)},createRow:function(e){const t={};return e.forEach((e=>{t[e.name]=e.default})),t.__phlex_multiline=this.getUUID(),t},deleteRow:function(e){this.rowData.splice(this.rowData.findIndex((t=>t.__phlex_multiline===e)),1),delete this.errors[e]},updateFieldInRow:function(e,t,i){this.rowData.forEach((n=>{n.__phlex_multiline===e&&(n[t]=i)}))},clearError:function(e,t){if(e in this.errors){const i=this.errors[e].filter((e=>e.name!==t));this.errors[e]=[...i],0===i.length&&delete this.errors[e]}},updateInputValue:function(){this.value=JSON.stringify(this.rowData)},buildRowData:function(e){const t=phlex.utils.json().tryParse(e,[]);return t.forEach((e=>{e.__phlex_multiline=this.getUUID()})),t},hasExpression:function(){return this.fieldData.filter((e=>e.isExpr)).length>0},fetchOnChangeAction:function(e=null){this.hasChangeCb&&(null===e||this.eventFields.indexOf(e)>-1)&&jQuery(this.$refs.addBtn.$el).api({on:"now",url:this.data.url,method:"post",data:{__phlex_multiline_action:"on-change",rows:this.value}})},postData:async function(e){const t={...e},i=this.$refs.addBtn.$el;t.__phlex_multiline_action="update-row";try{return await phlex.apiService.suiFetch(this.data.url,{data:t,method:"post",stateContext:i})}catch(e){console.error(e)}},fetchExpression:async function(e){if(this.hasExpression()){const t=this.findRow(e);if(t){const i=await this.postData(t);if(i.expressions){Object.keys(i.expressions).forEach((t=>{this.updateFieldInRow(e,t,i.expressions[t])})),this.updateInputValue()}}}},findRow:function(e){return this.rowData.find((t=>t.__phlex_multiline===e))},getInputElement:function(){return this.$refs.phlexMultilineInput},getUUID:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:11&t).toString(16)}))}},computed:{getSpan:function(){return this.fieldData.length-1},getDeletables:function(){return this.deletables},getMainToggleState:function(){let e="off";return this.deletables.length>0&&(e=this.deletables.length===this.rowData.length?"on":"indeterminate"),e},isDeleteDisable:function(){return!this.deletables.length>0},isLimitReached:function(){return 0!==this.data.rowLimit&&this.data.rowLimit<this.rowData.length+1}}}},9983:(e,t,i)=>{"use strict";i.d(t,{Z:()=>n});const n={name:"phlex-date-picker",template:'<flat-picker v-model="date" :config="flatPickr" @on-change="onChange"></flat-picker>',props:["config","value"],data:function(){const{useDefault:e,...t}=this.config;return!e||t.defaultDate||this.value?this.value&&(t.defaultDate=this.value):t.defaultDate=new Date,t.locale||(t.locale=flatpickr.l10ns.default),{flatPickr:t,date:null}},mounted:function(){!this.value&&this.flatPickr.defaultDate&&(this.flatPickr.defaultDate instanceof Date?this.$emit("setDefault",flatpickr.formatDate(this.config.defaultDate,this.config.dateFormat)):this.$emit("setDefault",this.flatPickr.defaultDate))},methods:{onChange:function(e){this.$emit("onChange",flatpickr.formatDate(e[0],this.flatPickr.dateFormat))}}}},3453:(e,t,i)=>{"use strict";i.d(t,{Z:()=>n});const n={name:"phlex-lookup",template:'<sui-dropdown \n                    ref="drop"\n                    v-bind="dropdownProps" \n                    :loading="isLoading" \n                    @input="onChange" \n                    @filtered="onFiltered" \n                    v-model="current" \n                    :class="css"></sui-dropdown>',props:["config","value","optionalValue"],data:function(){const{url:e,reference:t,ui:i,...n}=this.config;return n.selection=!0,{dropdownProps:n,current:this.value,url:e||null,css:[i],isLoading:!1,field:t,query:"",temp:""}},mounted:function(){this.optionalValue&&(this.dropdownProps.options=Array.isArray(this.optionalValue)?this.optionalValue:[this.optionalValue])},methods:{onChange:function(e){this.$emit("onChange",e)},onFiltered:function(e){e&&(this.isLoading=!0),this.temp=e,phlex.debounce((()=>{this.query!==this.temp&&(this.query=this.temp,this.query&&this.fetchItems(this.query))}),300).call(this)},fetchItems:async function(e){try{const t={phlex_vlookup_q:e,phlex_vlookup_field:this.field},i=await phlex.apiService.suiFetch(this.url,{method:"get",data:t});i.success&&(this.dropdownProps.options=i.results),this.isLoading=!1}catch(e){console.error(e),this.isLoading=!1}}}}}}]);